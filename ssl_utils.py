# üîß –ù–û–í–´–ô –§–ê–ô–õ - –∑–∞–≥—Ä—É–∑–∫–∞ SSL –≤–µ—Å–æ–≤
import torch
import os

def load_ssl_resnet50(ssl_path):
    """–°–æ–∑–¥–∞–µ—Ç ResNet50 —Å SSL –≤–µ—Å–∞–º–∏"""
    from torchvision.models import resnet50
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–æ–¥–µ–ª—å
    model = resnet50(pretrained=False)
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º SSL –≤–µ—Å–∞
    if not os.path.exists(ssl_path):
        print(f"‚ùå SSL weights not found at {ssl_path}")
        return resnet50(pretrained=True)  # Fallback to ImageNet
    
    ssl_state_dict = torch.load(ssl_path, map_location='cpu')
    print(f"üì¶ Loaded SSL weights, keys: {list(ssl_state_dict.keys())[:3]}...")
    
    # 3. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
    model_state_dict = model.state_dict()
    loaded_count = 0
    
    for ssl_key, ssl_value in ssl_state_dict.items():
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
        possible_keys = [
            ssl_key,
            ssl_key.replace('module.', ''),
            ssl_key.replace('encoder.', ''),
            ssl_key.replace('backbone.', ''),
            ssl_key.replace('fc.', ''),
        ]
        
        for possible_key in possible_keys:
            if possible_key in model_state_dict:
                if ssl_value.shape == model_state_dict[possible_key].shape:
                    model_state_dict[possible_key] = ssl_value
                    loaded_count += 1
                    break
    
    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
    model.load_state_dict(model_state_dict, strict=False)
    print(f"‚úÖ Loaded {loaded_count}/{len(model_state_dict)} layers from SSL")
    
    return model
